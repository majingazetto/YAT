;                                       ****************************************
;                                       * GENERIC HELP ROUTINES                *
;                                       ****************************************


; --- BIOS RELATED                      ----------------------------------------


; - CMPHLDE ----------
; - COMPARE HL WITH DE
; - (RST 20)
; -

CMPHLDE         LD      A,H
                SUB     D
                RET     NZ
                LD      A,L
                SUB     E
                RET     


; - CMPHLBC ----------
; - COMPARE HL WITH BC
; -

CMPHLBC         LD      A,H
                SUB     B
                RET     NZ
                LD      A,L
                SUB     C
                RET     

; --- STRING                           ----------------------------------------


; Combined routine for conversion of different sized binary numbers into
; directly printable ASCII(Z)-string
; Input value in registers, number size and -related to that- registers to fill
; is selected by calling the correct entry:
;
;  entry  inputregister(s)  decimal value 0 to:
;   B2D8             A                    255  (3 digits)
;   B2D16           HL                  65535   5   "
;   B2D24         E:HL               16777215   8   "
;   B2D32        DE:HL             4294967295  10   "
;   B2D48     BC:DE:HL        281474976710655  15   "
;   B2D64  IX:BC:DE:HL   18446744073709551615  20   "
;
; The resulting string is placed into a small buffer attached to this routine,
; this buffer needs no initialization and can be modified as desired.
; The number is aligned to the right, and leading 0's are replaced with spaces.
; On exit HL points to the first digit, (B)C = number of decimals
; This way any re-alignment / postprocessing is made easy.
; Changes: AF,BC,DE,HL,IX
; P.S. some examples below

; by Alwin Henseler


B2D8            LD      H,0
                LD      L,A
B2D16           LD      E,0
B2D24           LD      D,0
B2D32           LD      BC,0
B2D48           LD      IX,0            ; zero all non-used bits
B2D64           LD      (B2DINV),HL
                LD      (B2DINV + 2),DE
                LD      (B2DINV + 4),BC
                LD      (B2DINV + 6),IX ; place full 64-bit input value in buffer
                LD      HL,B2DBUF
                LD      DE,B2DBUF + 1
                LD      (HL)," "
B2DFILC         EQU     $ - 1           ; address of fill-character
                LD      BC,18
                LDIR                    ; fill 1st 19 bytes of buffer with spaces
                LD      (B2DEND-1),BC   ; set BCD value to "0" & place terminating 0
                LD      E,1             ; no. of bytes in BCD value
                LD      HL,B2DINV + 8   ; (address MSB input)+1
                LD      BC,#0909
                XOR     A
B2DSKP0         DEC     B
                JR      Z,B2DSIZ        ; all 0: continue with postprocessing
                DEC     HL
                OR      (HL)            ; find first byte <>0
                JR      Z,B2DSKP0
B2DFND1         DEC     C
                RLA
                JR      NC,B2DFND1      ; determine no. of most significant 1-bit
                RRA
                LD      D,A             ; byte from binary input value
B2DLUS2         PUSH    HL
                PUSH    BC
B2DLUS1         LD      HL,B2DEND - 1   ; address LSB of BCD value
                LD      B,E             ; current length of BCD value in bytes
                RL      D               ; highest bit from input value -> carry
B2DLUS0         LD      A,(HL)
                ADC     A,A
                DAA
                LD      (HL),A          ; double 1 BCD byte from intermediate result
                DEC     HL
                DJNZ    B2DLUS0         ; and go on to double entire BCD value (+carry!)
                JR      NC,B2DNXT
                INC     E               ; carry at MSB -> BCD value grew 1 byte larger
                LD      (HL),1          ; initialize new MSB of BCD value
B2DNXT          DEC     C
                JR      NZ,B2DLUS1      ; repeat for remaining bits from 1 input byte
                POP     BC              ; no. of remaining bytes in input value
                LD      C,8             ; reset bit-counter
                POP     HL              ; pointer to byte from input value
                DEC     HL
                LD      D,(HL)          ; get next group of 8 bits
                DJNZ    B2DLUS2         ; and repeat until last byte from input value
B2DSIZ          LD      HL,B2DEND       ; address of terminating 0
                LD      C,E             ; size of BCD value in bytes
                OR      A
                SBC     HL,BC           ; calculate address of MSB BCD
                LD      D,H
                LD      E,L
                SBC     HL,BC
                EX      DE,HL           ; HL=address BCD value, DE=start of decimal value
                LD      B,C             ; no. of bytes BCD
                SLA     C               ; no. of bytes decimal (possibly 1 too high)
                LD      A,'0'
                RLD                     ; shift bits 4-7 of (HL) into bit 0-3 of A
                CP      '0'             ; (HL) was > 9h?
                JR      NZ,B2DEXPH      ; if yes, start with recording high digit
                DEC     C               ; correct number of decimals
                INC     DE              ; correct start address
                JR      B2DEXPL         ; continue with converting low digit
B2DEXP          RLD                     ; shift high digit (HL) into low digit of A
B2DEXPH         LD      (DE),A          ; record resulting ASCII-code
                INC     DE
B2DEXPL         RLD
                LD      (DE),A
                INC     DE
                INC     HL              ; next BCD-byte
                DJNZ    B2DEXP          ; and go on to convert each BCD-byte into 2 ASCII
                SBC     HL,BC           ; return with HL pointing to 1st decimal
                RET


; - STR2INTZ ---------
; - 32 BITS ASCII TO BINARY
; - HL: ASCIIZ NUMBER (OR ASCII + #20)
; - OUTPUT:
; -     DE:HL BINARY VALUE
; - 

STR2INTZ        EXX 
                LD      DE,#0000
                LD      HL,#0000
                EXX

                LD      A,(HL)
                AND     A
                JP      Z,.END
                CP      ' '
                JP      Z,.END
                SUB     '0'

                EXX
                LD      B,0
                LD      C,A
               
.LOOP           ADD     HL,BC
                EX      DE,HL
                LD      BC,0
                ADC     HL,BC
                EX      DE,HL
                EXX
                INC     HL
                LD      A,(HL)
                AND     A
                JR      Z,.END
                CP      ' '
                JR      Z,.END
                EXX
                SUB     '0'
                LD      C,A

                PUSH    BC

                ; x 10 = x2 + x8


                ; x 2

                SLA     L
                RL      H
                RL      E
                RL      D

                PUSH    DE
                PUSH    HL

                ; x 4
                RL      L
                RL      H
                RL      E
                RL      D

                ; x 8
                RL      L
                RL      H
                RL      E
                RL      D

                POP     BC
                ADD     HL,BC
                LD      BC,0
                EX      DE,HL
                ADC     HL,BC
                POP     BC
                ADD     HL,BC
                EX      DE,HL

                POP     BC

                JR      .LOOP

.END            EXX 
                RET


; - STR2INT ------------
; - INPUT:
; - HL: POINTER TO STR NUMBER
; - OUTPUT:
; - HL: UNSIGNED INT NUMBER
; - 

STR2INT         PUSH    HL
                POP     IX
                LD      A,(IX + 0)
                SUB     '0'
                LD      DE,10000
                CALL    MULT12                  ; RESULT IN HL

                PUSH    HL
                LD      A,(IX + 1)
                SUB     '0'
                LD      DE,1000
                CALL    MULT12                  ; RESULT IN HL
                POP     DE
                ADD     HL,DE
                
                PUSH    HL
                LD      A,(IX + 2)
                SUB     '0'
                LD      DE,100
                CALL    MULT12                  ; RESULT IN HL
                POP     DE
                ADD     HL,DE

                PUSH    HL
                LD      A,(IX + 3)
                SUB     '0'
                LD      DE,10
                CALL    MULT12                  ; RESULT IN HL
                POP     DE
                ADD     HL,DE
                
                LD      A,(IX + 4)
                SUB     '0'
                LD      E,A
                LD      D,0
                ADD     HL,DE
                RET     


; - BYTE2ASC ---------
; - CONVERTS A IN
; - DECIMAL STRING 
; - A: STRING
; - IX: BUFFER
; - OUTPUT:
; -     IX POINTS TO END + 1
; -

BYTE2ASC        CP      10
                JR      C,.C1D
                CP      100
                JR      C,.C2D
                CP      200
                JR      C,.C1XX

                ; >= 200 < 256

.C2XX           LD      (IX + 0),'2'
                SUB     200
                JR      .CXXX

                ; >= 100 < 200
                
.C1XX           LD      (IX + 0),'1'
                SUB     100
.CXXX           INC     IX
                CP      10
                JR      NC,.C2D
                LD      (IX + 0),'0'
                INC     IX

                ; 1 DIGIT

.C1D            ADD     A,'0'
                LD      (IX + 0),A
                INC     IX
                RET

                ; 2 DIGITS
                
.C2D            LD      C,'0'
.C2DCNT         INC     C
                SUB     10
                CP      10
                JR      NC,.C2DCNT
                LD      (IX + 0),C
                INC     IX
                JR      .C1D
                
                
; - STRTAIL ----------
; - RETURN POINTER
; - IN THE LAST CHAR OF
; - ASCIIZ STRING
; - HL: ASCIIZ STRING
; - OUTPUT:
; -     HL: POINTER TO LAST CHAR
; -     BC: SIZE
; - 

STRTAIL         LD      BC,#0000
                ; CHECK 0
                LD      A,(HL)
                AND     A
                RET     Z
.LOOP           LD      A,(HL)
                AND     A
                JR      Z,.END
                INC     HL
                INC     BC
                JR      .LOOP
.END            DEC     HL
                RET


; --- MATH                              -----------------------------------------


; - MULT12 -------------
; - A * DE = HL
; -


MULT12          LD      HL,0
                ADD     A,A
                JP      NC,.ILOOP
                LD      H,D
                LD      L,E
.ILOOP          LD      B,7
.LOOP           ADD     HL,HL
                ADD     A,A
                JP      NC,.NOADD
                ADD     HL,DE
.NOADD          DJNZ    .LOOP
                RET


; --- TBL                               ----------------------------------------


; - GETSTR  ----------
; - GET STRING FROM TABLE
; - B: INDEX
; - DE: TBL
; - OUTPUT:
; -     DE: POINTER TO STR
; -

GETSTR          LD      A,(DE)
                INC     DE
                AND     A
                JR      NZ,.LOOP

                ; UNKNOWN 

                LD      IX,UNKNOWN.CODE
                LD      A,B
                CALL    BYTE2ASC
                LD      (IX + 0), ')'
                LD      (IX + 1), '$'
                LD      DE,UNKNOWN
                RET
                
                ; CHECK ERROR
               
.LOOP           CP      B
                RET     Z

                ; NEXT STRING
                
.NEXT           LD      A,(DE)
                INC     DE
                CP      '$'
                JR      NZ,.NEXT
                JR      GETSTR


; --- HL                                ----------------------------------------


; - ADDHLA -----------
; - HL = HL + A
; - 

ADDHLA          ADD     A,L
                LD      L,A
                RET     NC
                INC     H
                RET

                
; - ADDHLPNT ---------
; - A * 2
; - HL + = A
; - HL = (HL)
; - A = (HL)
; - 

ADDHLPNT        ADD     A,A
                CALL    ADDHLA


; - PNTHL ------------
; - HL = (HL) 
; - A = (HL)  
; -

PNTHL           LD      A,(HL)
                INC     HL
                LD      H,(HL)
                LD      L,A
                ;LD     A,(HL)
                RET


; - CALHL ---------------
; - CALL HL
; -

CALHL           JP   (HL) 



; - CALFUN --------------     
; - HL: POINTER 
; - A * 2       
; - HL + = A    
; - HL = (HL)   
; - JP (HL)     
; -

CALFUN          CALL ADDHLPNT
                JP   (HL)


; --- FUNCTION KEYS             -----------------------------------------


; - CLFNKEY ------------
; - CLEAR FUNCTION KEYS
; - 

CLFNKEY         LD      HL,FNKSTR
                LD      DE,FNKBUF
                LD      B,#0A
.LOOP           PUSH    BC
                LD      A,(HL)
                LD      (DE),A
                INC     DE
                LD      (HL),0
                LD      BC,#10
                ADD     HL,BC
                POP     BC
                DJNZ    .LOOP
                RET

; - REFNKEY ------------
; - RESTORE FUNCTION KEYS
; - 

REFNKEY         LD      HL,FNKSTR
                LD      DE,FNKBUF
                LD      B,#0A
.LOOP           PUSH    BC
                LD      A,(DE)
                INC     DE
                LD      (HL),A
                LD      BC,#10
                ADD     HL,BC
                POP     BC
                DJNZ    .LOOP
                RET


